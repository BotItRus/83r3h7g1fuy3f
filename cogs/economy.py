import asyncio
import json
import random

import discord

from discord.ext import commands
from datetime import datetime

from .utils import utils


class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name='–±–∞–ª–∞–Ω—Å', aliases=['–±–∞–ª', '–±–ª'])
    async def balance(self, ctx, member: discord.Member = None):
        with open('files/file/users_info.json', 'r', encoding='utf-8') as f:
            bl = json.load(f)

        await ctx.message.delete()
        if member is None:
            member = ctx.author

        money = bl[str(member.id)]['balance']
        embed = discord.Embed(color=utils.randomColor())

        list = sorted(bl, key=(lambda x: bl[x]['balance']))
        a = 0
        for name in list:
            usersCoins = bl[name]['balance']
            a += usersCoins

        embed.set_author(name=f'{member.display_name}')
        embed.set_thumbnail(url=member.avatar_url_as(size=64))
        embed.add_field(name='**–ë–∞–ª–∞–Ω—Å:**', value=f'{money} –∫–æ–∏–Ω–æ–≤', inline=False)
        embed.add_field(name='**–ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–∞:**', value=f'{a} –∫–æ–∏–Ω–æ–≤', inline=False)
        await ctx.send(embed=embed)

    @commands.command(name='–¥–µ–π–ª–∏')
    @commands.cooldown(1, 21600, commands.BucketType.user)
    async def daily(self, ctx):
        with open('files/file/users_info.json', 'r') as f:
            bl = json.load(f)

        await ctx.message.delete()

        pika = utils.checkPets('pikachu', ctx.author)
        lexa = utils.checkPets('lexa', ctx.author)

        if pika is True:
            await utils.update_money(bl, ctx.author, 22000)
            await ctx.send('–í—ã–¥–∞–ª 22000 –∫–æ–∏–Ω–æ–≤, —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤')
            print(f'{ctx.author.display_name} get 22000 coins')
        elif lexa is True:
            await utils.update_money(bl, ctx.author, 1000)
            await ctx.send('–í—ã–¥–∞–ª 1000 –∫–æ–∏–Ω–æ–≤, —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤')
            print(f'{ctx.author.display_name} get 1000 coins')
        else:
            await utils.update_money(bl, ctx.author, 2000)
            await ctx.send('–í—ã–¥–∞–ª 2000 –∫–æ–∏–Ω–æ–≤, —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤')
            print(f'{ctx.author.display_name} get 2000 coins')

        return utils.save_data(bl)

    @daily.error
    async def daily_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            time = int(error.retry_after)
            seconds_to_minute = 60
            seconds_to_hour = 60 * seconds_to_minute

            hours = time // seconds_to_hour
            time %= seconds_to_hour

            min = time // seconds_to_minute
            time %= seconds_to_minute

            sec = time

            await ctx.send(f'–û—Å—Ç–∞–ª–æ—Å—å: {hours}—á, {min}–º, {sec}—Å')

    @commands.command(name='–∫–∞–∑–∏–Ω–æ', aliases=['–∫–∑', '–∫–∞–∑'])
    @commands.cooldown(1, 2, type=commands.BucketType.user)
    async def casino(self, ctx, amount: int):
        with open('files/file/users_info.json', 'r') as f:
            users = json.load(f)

        await ctx.message.delete()

        money = users[str(ctx.author.id)]['balance']

        emoji = "üçéüçäüçêüçãüçâüçáüçìüçë"
        a = random.choice(emoji)
        b = random.choice(emoji)
        c = random.choice(emoji)

        slots = f"**{a} {b} {c}\n{ctx.author.name}**,"

        if money < amount:
            await ctx.send('–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥')
            return
        if amount <= 0:
            await ctx.send('–¢—ã –¥—É—Ä–∞ –∏–ª–∏ –¥–∞')
            return

        else:
            if amount > money:
                await ctx.send(f'–£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É: {money}')
            if money >= amount:
                if a == b == c:
                    await ctx.send(f"{slots} –í—Å—ë —Å–æ–≤–ø–∞–ª–æ, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!>_<")
                    result = amount * 5
                    await utils.update_money(users, ctx.author, result)
                elif (a == b) or (a == c) or (b == c):
                    await ctx.send(f"{slots} 2 –ø–æ–¥—Ä—è–¥, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!>_<")
                    result = amount * 2
                    await utils.update_money(users, ctx.author, result)
                else:
                    await ctx.send(f"{slots} –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(")
                    await utils.update_money(users, ctx.author, -amount)

        utils.save_data(users)

    @casino.error
    async def casino_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(f'–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑: {int(error.retry_after)}')

    @commands.command(name='–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å', aliases=['–ø—Ä'])
    async def transfer(self, ctx, amount: int, member: discord.Member):
        with open('files/file/users_info.json', 'r') as f:
            users = json.load(f)

        await ctx.message.delete()

        ctx_money = users[str(ctx.author.id)]['balance']

        if member == ctx.author:
            await ctx.send('–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–∞–º —Å–µ–±–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã!')
            return

        if amount <= 0:
            await ctx.send('–î–∞-–¥–∞ –¥–∞–≤–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ...')
            return

        if amount <= ctx_money:
            await utils.update_money(users, ctx.author, -amount)
            await utils.update_money(users, member, amount)
            await ctx.send(f'**{ctx.author.display_name}** –ø–µ—Ä–µ–≤—ë–ª **{member.display_name}**: **{amount} –∫–æ–∏–Ω–æ–≤**')
        else:
            await ctx.send('–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å!')

        utils.save_data(users)

    @transfer.error
    async def transfer_error(self, ctx, error):
        if isinstance(error, commands.BadArgument):
            embed = discord.Embed(title='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:',
                                  description='.–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å(–ø—Ä) {–∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤} {–Ω–∏–∫}',
                                  color=utils.randomColor())
            await ctx.send(embed=embed)
        if isinstance(error, commands.CommandInvokeError):
            embed = discord.Embed(title='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:',
                                  description='.–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å(–ø—Ä) {–∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤} {–Ω–∏–∫}',
                                  color=utils.randomColor())
            await ctx.send(embed=embed)

    @commands.command(name='–¥–µ–ø–æ–∑–∏—Ç', aliases=['–¥–ø'])
    @commands.cooldown(1, 14400, commands.BucketType.user)
    async def deposit(self, ctx, count: int):
        with open('files/file/users_info.json', 'r') as f:
            users = json.load(f)

        money = users[str(ctx.author.id)]['balance']
        if money < count:
            return await ctx.send('–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–∏–Ω–æ–≤!')
        if count <= 0:
            return await ctx.send('–ù–µ-–∞, —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

        result = int(count + (count * 0.2))

        await utils.update_money(users, ctx.author, -count)
        utils.save_data(users)
        await ctx.send(f'–° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ **{count} –∫–æ–∏–Ω–æ–≤**')
        await ctx.send(f'–°–ø—É—Å—Ç—è 4 —á–∞—Å–∞ –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è {result}')

        await asyncio.sleep(14400)

        lexa = utils.checkPets('lexa', ctx.author)
        if lexa is True:
            rn = random.randint(1, 3)
            if rn == 1:
                return await ctx.send('–£–≤—ã, –ª—ë—Ö–∞ —Å–ø–∏–∑–¥–∏–ª –∫–æ–∏–Ω—ã')

        await utils.update_money(users, ctx.author, result)
        await ctx.send(f'**{ctx.author.display_name}** –≤–∞–º –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–∞—à–∏ –∫–æ–∏–Ω—ã.')
        utils.save_data(users)

    @deposit.error
    async def deposit_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            time = int(error.retry_after)
            seconds_to_minute = 60
            seconds_to_hour = 60 * seconds_to_minute

            hours = time // seconds_to_hour
            time %= seconds_to_hour

            min = time // seconds_to_minute
            time %= seconds_to_minute

            sec = time

            await ctx.send(f'–û—Å—Ç–∞–ª–æ—Å—å: {hours}—á, {min}–º, {sec}—Å')

    @commands.command(name='—Ä—É–ª–µ—Ç–∫–∞', aliases=['—Ä–ª'])
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def roulette(self, ctx, color, count: int):
        with open('files/file/users_info.json', 'r') as f:
            users = json.load(f)

        money = users[str(ctx.author.id)]['balance']
        black = [35, 26, 28, 29, 22, 31, 20, 33, 24, 10, 8, 11, 13, 6, 17, 2, 4, 15]
        red = [3, 12, 7, 18, 9, 14, 1, 16, 5, 23, 30, 36, 27, 34, 25, 21, 19, 32]
        green = 0
        result = random.randint(0, 37)

        if color != '—á—ë—Ä–Ω—ã–π' and color != '–∫—Ä–∞—Å–Ω—ã–π' and color != '–∑–µ–ª—ë–Ω—ã–π':
            return await ctx.send('–¶–≤–µ—Ç–∞: —á—ë—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π, –∑–µ–ª—ë–Ω—ã–π')

        if money < count:
            return await ctx.send('–£ —Ç–µ–±—è –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–∏–Ω–æ–≤!')
        if count <= 0:
            return await ctx.send('–ù–µ-–∞, —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        await ctx.send('–ò—Ç–∞–∫, –≤—ã...')
        await asyncio.sleep(3)

        if color == '—á—ë—Ä–Ω—ã–π' and result in black:
            res = count * 2
            await utils.update_money(users, ctx.author, res)
            await ctx.send(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ß—ë—Ä–Ω–∞—è {result}')
            await ctx.send(f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ **{res} –∫–æ–∏–Ω–æ–≤**')
            return utils.save_data(users)
        if color == '–∫—Ä–∞—Å–Ω—ã–π' and result in red:
            res = count * 2
            await utils.update_money(users, ctx.author, res)
            await ctx.send(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ö—Ä–∞—Å–Ω–∞—è {result}')
            await ctx.send(f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ **{res} –∫–æ–∏–Ω–æ–≤**')
            return utils.save_data(users)
        if color == '–∑–µ–ª—ë–Ω—ã–π' and result == green:
            res = count * 10
            await utils.update_money(users, ctx.author, res)
            await ctx.send(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ó–µ–ª—ë–Ω–∞—è {result}')
            await ctx.send(f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ **{res} –∫–æ–∏–Ω–æ–≤**')
            return utils.save_data(users)

        await utils.update_money(users, ctx.author, -count)
        utils.save_data(users)
        return await ctx.send('–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...')

    @roulette.error
    async def roulette_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            embed = discord.Embed(title='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:',
                                  description='.—Ä—É–ª–µ—Ç–∫–∞ {–∫—Ä–∞—Å–Ω—ã–π/—á—ë—Ä–Ω—ã–π/–∑–µ–ª—ë–Ω—ã–π} {–∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤}',
                                  color=utils.randomColor())
            await ctx.send(embed=embed)
        if isinstance(error, commands.BadArgument):
            embed = discord.Embed(title='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:',
                                  description='.—Ä—É–ª–µ—Ç–∫–∞ {–∫—Ä–∞—Å–Ω—ã–π/—á—ë—Ä–Ω—ã–π/–∑–µ–ª—ë–Ω—ã–π} {–∫–æ–ª-–≤–æ –∫–æ–∏–Ω–æ–≤}',
                                  color=utils.randomColor())
            await ctx.send(embed=embed)
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(f'–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑: {int(error.retry_after)}')

    @commands.command(name='—É–∫—Ä–∞—Å—Ç—å', aliases=['—É–∫—Ä', '—É–∫'])
    @commands.cooldown(1, 900, commands.BucketType.user)
    async def rob(self, ctx, member: discord.Member):
        with open('files/file/users_info.json', 'r') as f:
            users = json.load(f)

        await utils.update_data(users, member)

        moneyM = users[str(member.id)]['balance']
        r = random.randint(1, 10)

        if moneyM <= 100:
            return await ctx.send(f'–ü—Ä–æ—Å—Ç–∏...–£ **{member}** –º–∞–ª–æ –∫–æ–∏–Ω–æ–≤...')
        if member == ctx.author:
            return await ctx.send('–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–∫—Ä–∞—Å—Ç—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è –∫–æ–∏–Ω—ã...')
        if member == ctx.me:
            return await ctx.send('–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É–∫—Ä–∞—Å—Ç—å —É –º–µ–Ω—è –∫–æ–∏–Ω—ã...')

        if r == 5:
            result = int(-moneyM * 20 / 100)
            await utils.update_money(users, member, result)
            await utils.update_money(users, ctx.author, result)
            return await ctx.send(
                f'**{ctx.author.display_name}** —É–∫—Ä–∞–ª —É **{member.display_name}**: **{result} –∫–æ–∏–Ω–æ–≤**')
        else:
            return await ctx.send('–£–≤—ã —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ...')

    @rob.error
    async def rob_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            time = int(error.retry_after)
            seconds_to_minute = 60

            min = time // seconds_to_minute
            time %= seconds_to_minute

            sec = time

            await ctx.send(f'–û—Å—Ç–∞–ª–æ—Å—å: {min}–º, {sec}—Å')

    @commands.command(name='–Ω–∞–ª–æ–≥–∏', aliases=['–Ω–ª'])
    async def tax(self, ctx):
        with open('files/file/users_info.json', 'r', encoding='utf-8') as f:
            users = json.load(f)
        with open('files/file/users_pets.json', 'r', encoding='utf-8') as f:
            pet = json.load(f)

        putin = utils.checkPets('putin', ctx.author)

        list = sorted(users, key=(lambda x: users[x]['balance']))
        a = 0
        for name in list:
            usersCoins = users[name]['balance']
            a += usersCoins

        if putin is True:
            PutinTime = pet[str(ctx.author.id)]['pets']['PutinTime']
            datetimeFormat = '%Y-%m-%d %H:%M:%S.%f'
            if PutinTime == '':
                pet[str(ctx.author.id)]['pets']['PutinTime'] = str(datetime.utcnow())
                await utils.update_money(users, ctx.author, int(a * 20 / 100))
                await ctx.send(f'–ü—É—Ç–∏–Ω —Å–æ–±—Ä–∞–ª –Ω–∞–ª–æ–≥–æ–≤ –Ω–∞: **{a * 20 / 100} –∫–æ–∏–Ω–æ–≤**')
                utils.save_data(users)
                return utils.save_pets(pet)
            else:
                time_diff = datetime.strptime(str(datetime.utcnow()), datetimeFormat) \
                            - datetime.strptime(str(PutinTime), datetimeFormat)
                if time_diff.seconds >= 259200:
                    pet[str(ctx.author.id)]['pets']['PutinTime'] = str(datetime.utcnow())

                    await utils.update_money(users, ctx.author, int(a * 20 / 100))
                    await ctx.send(f'–ü—É—Ç–∏–Ω —Å–æ–±—Ä–∞–ª –Ω–∞–ª–æ–≥–æ–≤ –Ω–∞: **{a * 20 / 100} –∫–æ–∏–Ω–æ–≤**')
                    utils.save_data(users)
                    utils.save_pets(pet)
                else:
                    res = 259200 - time_diff.seconds
                    time = int(res)
                    seconds_to_minute = 60
                    seconds_to_hour = 60 * seconds_to_minute
                    seconds_to_day = 24 * seconds_to_hour

                    day = time // seconds_to_day
                    time %= seconds_to_day

                    hours = time // seconds_to_hour
                    time %= seconds_to_hour

                    min = time // seconds_to_minute
                    time %= seconds_to_minute

                    sec = time

                    return await ctx.send(f'–û—Å—Ç–∞–ª–æ—Å—å: {day}–¥, {hours}—á, {min}–º, {sec}—Å')
        else:
            return await ctx.send('–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –ü—É—Ç–∏–Ω –∏–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')


def setup(bot):
    bot.add_cog(Economy(bot))
